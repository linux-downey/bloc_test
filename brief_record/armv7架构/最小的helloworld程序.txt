https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md
针对不同的平台，系统调用表

arm 平台上，系统调用指令为 svc(老版的为swi)

传递的参数依次放在 r0,r1,r2,r3,r4,r5 中
系统调用返回值放在 r0 中
系统调用号为放在 r7 中



_start:
	这一部分执行 write 系统调用，对应调用号为 4 , r0 传递 fd，1 表示标准输出，r1 传递数据地址，示例中为 msgtext，第三个参数为长度，保存在 r2,13 字节，svc #0 表示执行系统调用。  
	mov r0,#1        
	adr r1,msgtext
	mov r2,#13
	mov r7,#4
	svc #0

	//1号系统调用为 exit，这里相当于 exit(2)
	mov r0,#2
	mov r7,#1
	svc #0
	
msgtext:
	.asciz "Hello world\n\0"



移植一个 printf 函数出来：
	
	

#ifndef _MPRINT_
#define _MPRINT_

int print(const char *fmt, ...);

struct printf_info {
        char *bf;       /* Digit buffer */
        char zs;        /* non-zero if a digit has been written */
        char *outstr;   /* Next output position for sprintf() */

        /* Output a character */
        void (*putc)(struct printf_info *info, char ch);

        char buf[1000];
        int index;
};

//https://www.cnblogs.com/cpoint/p/3374994.html


#endif




#include "mprintf.h"

void putc_normal(struct printf_info *info, char ch)
{
        putc(ch);
}

static void out(struct printf_info *info, char c)
{
        *info->bf++ = c;
}

static void out_dgt(struct printf_info *info, char dgt)
{
        out(info, dgt + (dgt < 10 ? '0' : 'a' - 10));
        info->zs = 1;
}

static void div_out(struct printf_info *info, unsigned long *num,
                    unsigned long div)
{
        unsigned char dgt = 0;

        while (*num >= div) {
                *num -= div;
                dgt++;
        }

        if (info->zs || dgt > 0)
                out_dgt(info, dgt);
}


static void mputc(struct printf_info *info, char ch)
{
        info->buf[index++] = ch;
}

int print(const char *fmt, ...)
{
        struct printf_info info;

        va_list va;
        int ret;

        info.putc = putc_normal;
        va_start(va, fmt);
        ret = _vprintf(&info, fmt, va);
        va_end(va);

        return ret;
}

int _vprintf(struct printf_info *info, const char *fmt, va_list va)
{
        char ch;
        char *p;
        unsigned long num;
        char buf[12];
        unsigned long div;

        while ((ch = *(fmt++))) {
                if (ch != '%') {
                        info->putc(info, ch);
                } else {
                        bool lz = false;
                        int width = 0;
                        bool islong = false;

                        ch = *(fmt++);
                        if (ch == '-')
                                ch = *(fmt++);

                        if (ch == '0') {
                                ch = *(fmt++);
                                lz = 1;
                        }

                        if (ch >= '0' && ch <= '9') {
                                width = 0;
                                while (ch >= '0' && ch <= '9') {
                                        width = (width * 10) + ch - '0';
                                        ch = *fmt++;
                                }
                        }
                        if (ch == 'l') {
                                ch = *(fmt++);
                                islong = true;
                        }

                        info->bf = buf;
                        p = info->bf;
                        info->zs = 0;

                        switch (ch) {
                        case '\0':
                                goto abort;
                        case 'u':
                        case 'd':
                                div = 1000000000;
                                if (islong) {
                                        num = va_arg(va, unsigned long);
                                        if (sizeof(long) > 4)
                                                div *= div * 10;
                                } else {
                                        num = va_arg(va, unsigned int);
                                }

                                if (ch == 'd') {
                                        if (islong && (long)num < 0) {
                                                num = -(long)num;
                                                out(info, '-');
                                        } else if (!islong && (int)num < 0) {
                                                num = -(int)num;
                                                out(info, '-');
                                        }
                                }
                                if (!num) {
                                        out_dgt(info, 0);
                                } else {
                                        for (; div; div /= 10)
                                                div_out(info, &num, div);
                                }
                                break;
                        case 'x':
                                if (islong) {
                                        num = va_arg(va, unsigned long);
                                        div = 1UL << (sizeof(long) * 8 - 4);
                                } else {
                                        num = va_arg(va, unsigned int);
                                        div = 0x10000000;
                                }
                                if (!num) {
                                        out_dgt(info, 0);
                                } else {
                                        for (; div; div /= 0x10)
                                                div_out(info, &num, div);
                                }
                                break;
                        case 'c':
                                out(info, (char)(va_arg(va, int)));
                                break;
                        case 's':
                                p = va_arg(va, char*);
                                break;
                        case '%':
                                out(info, '%');
                        default:
                                break;
                        }

                        *info->bf = 0;
                        info->bf = p;
                        while (*info->bf++ && width > 0)
                                width--;
                        while (width-- > 0)
                                info->putc(info, lz ? '0' : ' ');
                        if (p) {
                                while ((ch = *p++))
                                        info->putc(info, ch);
                        }
                }
        }

abort:
        return 0;
}








