.o 文件：
	先编译出 .o 文件，使用 readelf -h 读取 elf 头，使用 hexdump -C test.o -n 64 来对比。
	elf 头长度为 64 字节。
	
	magic：magic 部分一共 16 个字节

arm 中 elf 格式，定义在 /usr/include/elf.h

#define EI_NIDENT (16)

typedef struct
{
  unsigned char e_ident[EI_NIDENT];     /* Magic number and other info */
  Elf32_Half    e_type;                 /* Object file type */
  Elf32_Half    e_machine;              /* Architecture */
  Elf32_Word    e_version;              /* Object file version */
  Elf32_Addr    e_entry;                /* Entry point virtual address */
  Elf32_Off     e_phoff;                /* Program header table file offset */
  Elf32_Off     e_shoff;                /* Section header table file offset */
  Elf32_Word    e_flags;                /* Processor-specific flags */
  Elf32_Half    e_ehsize;               /* ELF header size in bytes */
  Elf32_Half    e_phentsize;            /* Program header table entry size */
  Elf32_Half    e_phnum;                /* Program header table entry count */
  Elf32_Half    e_shentsize;            /* Section header table entry size */
  Elf32_Half    e_shnum;                /* Section header table entry count */
  Elf32_Half    e_shstrndx;             /* Section header string table index */
} Elf32_Ehdr;

e_ident : 7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00
	7f 45 4c 46  : 头文件识别
	01           ：1 表示 32 位 ELF 文件，2 表示64位 ELF 文件，
	01           ：小端模式，2表示大端模式
	01			 ：EI_version ，1 表示 EV_CURRENT，只有 1 才是合理的。
	00           ： OS_ABI
	00           ： ABI version
	其他 byte 没有意义。  
	
e_type：
	REL (Relocatable file)
	EXEC (Executable file)
	DYN (Shared object file)
	CORE (Core file)
	
	file：readelf.c
	line：2277

e_machine:
	EM_ARM:40
	
	file:readelf.c
	line:2301

e_version:
	就是四字节的version

e_entry：
	四(八)字节的入口地址

e_phoff：
	四(八)字节的 program header 地址

e_shoff：
	四(八)字节的 section headers 地址
	
e_flags：
	取决于 e_machine,根据 e_machine 进行解析。
	
	file:readelf.c
	line:3105
	
e_ehsize:
	elf header size
	
e_phentsize:
	每一个 program header 的 size

e_phnum:
	program header 的数量

e_shentsize：
	每一个 section header 的 size
	
e_shnum：
	section header 的数量

e_shstrndx：
	节标题字符串索引表
	段字符串所在的段索引，值为 8 表示第九个段是用来装字符串的。



header 就是文件开始的地方。  
整个 header 文件的含义，在 readelf.c ，4850 行，process_file_header 函数中，每一个对应的都能看到。  
32 和 64 的头长度是不一样的，一个 52，一个 64.

主要区别在于 e_entry、e_phoff、e_shoff 这三个字段，每个相差 4 bytes，相当于 12 bytes。

typedef struct {
  unsigned char	e_ident[16];		/* ELF "magic number" */
  unsigned char	e_type[2];		/* Identifies object file type */
  unsigned char	e_machine[2];		/* Specifies required architecture */
  unsigned char	e_version[4];		/* Identifies object file version */
  unsigned char	e_entry[4];		/* Entry point virtual address */
  unsigned char	e_phoff[4];		/* Program header table file offset */
  unsigned char	e_shoff[4];		/* Section header table file offset */
  unsigned char	e_flags[4];		/* Processor-specific flags */
  unsigned char	e_ehsize[2];		/* ELF header size in bytes */
  unsigned char	e_phentsize[2];		/* Program header table entry size */
  unsigned char	e_phnum[2];		/* Program header table entry count */
  unsigned char	e_shentsize[2];		/* Section header table entry size */
  unsigned char	e_shnum[2];		/* Section header table entry count */
  unsigned char	e_shstrndx[2];		/* Section header string table index */
} Elf32_External_Ehdr;


typedef struct {
  unsigned char	e_ident[16];		/* ELF "magic number" */
  unsigned char	e_type[2];		/* Identifies object file type */
  unsigned char	e_machine[2];		/* Specifies required architecture */
  unsigned char	e_version[4];		/* Identifies object file version */
  unsigned char	e_entry[8];		/* Entry point virtual address */
  unsigned char	e_phoff[8];		/* Program header table file offset */
  unsigned char	e_shoff[8];		/* Section header table file offset */
  unsigned char	e_flags[4];		/* Processor-specific flags */
  unsigned char	e_ehsize[2];		/* ELF header size in bytes */
  unsigned char	e_phentsize[2];		/* Program header table entry size */
  unsigned char	e_phnum[2];		/* Program header table entry count */
  unsigned char	e_shentsize[2];		/* Section header table entry size */
  unsigned char	e_shnum[2];		/* Section header table entry count */
  unsigned char	e_shstrndx[2];		/* Section header string table index */
} Elf64_External_Ehdr;


line 6112，process_section_headers()  专门处理 section headers；



每个段的信息，由 section headers 描述，每个 section header 占用 40(64) 字节：
	
typedef struct elf_internal_shdr {
	unsigned int	sh_name;		/* Section name, index in string tbl */
	unsigned int	sh_type;		/* Type of section */
	bfd_vma	sh_flags;		/* Miscellaneous section attributes */
	bfd_vma	sh_addr;		/* Section virtual addr at execution */
	file_ptr	sh_offset;		/* Section file offset */
	bfd_size_type	sh_size;		/* Size of section in bytes */
	unsigned int	sh_link;		/* Index of another section */
	unsigned int	sh_info;		/* Additional section information */
	bfd_vma	sh_addralign;		/* Section alignment */
	bfd_size_type	sh_entsize;		/* Entry size if section holds table */

	/* The internal rep also has some cached info associated with it. */
	asection *	bfd_section;		/* Associated BFD section.  */
	unsigned char *contents;		/* Section contents.  */
} Elf_Internal_Shdr;
	
	
整个头的内存分布就是按照这个结构体来的。
typedef struct {
  unsigned char	sh_name[4];		// 段名称在 sh_hdr 中的索引地址，字节为单位
  unsigned char	sh_type[4];		// 这个 type 需要根据架构进行区分，
  unsigned char	sh_flags[4];		/* Miscellaneous section attributes */
  unsigned char	sh_addr[4];		/* Section virtual addr at execution */
  unsigned char	sh_offset[4];		/* Section file offset */
  unsigned char	sh_size[4];		/* Size of section in bytes */
  unsigned char	sh_link[4];		/* Index of another section */
  unsigned char	sh_info[4];		/* Additional section information */
  unsigned char	sh_addralign[4];	/* Section alignment */
  unsigned char	sh_entsize[4];		/* Entry size if section holds table */
} Elf32_External_Shdr;
	
	

获取整个 section header 的方法在 get_32bit_section_headers 中，line 5437.
	
sh_name：保存在 section header table 段中，这个值表示在 section header table 中的索引地址。

sh_type：section header type  ：line 4279

sh_flags：line 5802

sh_addr：section header 的地址
sh_offset：section header 的 offset
sh_size：section 的 size
sh_link：
sh_info：额外的 section  header 信息
sh_addralign:对齐字节
sh_entsize：如果 section 有 table，入口的 size？






	
	0  NULL段，没有意义，其实指的就是 elf 头
	
	.text：全部都是代码
	
	.rel.text：
	







bss 和 COMMON 段，COMMON 段是伪段
对于目标文件，bss 只存放初始化为 0 的全局变量或者静态变量，而 COMMON 段用于保存未初始化的部分，这是因为 gcc 支持强弱符号，初始化为 0 表示为强符号，就直接放到 bss 里面，未初始化表示弱符号，就放在 COMMON 部分，统一交给链接器处理。

COMMON 被包含在 symbol table 中。 

	
	
专门针对重定位写一篇，涉及到汇编代码。  
	













