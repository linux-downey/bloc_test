Arm Architecture Procedure call standard

机器类型：

基本的：
	(unsigned)byte                 1
	(unsigned)half-word            2
	(unsigned)word                 4
	(unsigned)double-word          8

float：
	half precision                 2
	single precision               4
	double precision               8

容器向量：
	64-bit vector                  8
	128-bit vector                 16

pointer：
	data pointer                   4
	code pointer                   4
	

大小端描述。  

r0-r3 专门用来传递参数，同时也作为返回的数据，同时可能作为临时存储寄存器
r12(IP) ,也可以作为临时存储寄存器

R9 是一个特殊的寄存器，它的作用是平台指定的，可能是某个数据模型的 static base，或者专门用做 thread-local storage，
	
r4-r8，r10、r11，用于保存程序的local value。


	
数据超过 32bit 时的处理：
 double-word 由两个寄存器保存
 128bit 的 containerized vector 装在4个寄存器中
 
SP 指针必须向 word 对齐

汇编的 BL 指令：
BL 指令相对于 B，是保存返回地址的跳转指令，它会将下一条指令保存在 LR 寄存器中。

ARM 和 thumb 指令集的 BL 指令都不能寻址整个 32-bit 空间，


返回值：
	half-precision 类型会被转换成 single-precision 放在 r0
	word size 的将会放在 r0
	64bit 占据 r0，r1
	128bit 占据 r0~r3
	大于4字节的复合类型，会保存在内存中，返回内存地址(待验证)。  

参数传递：(待细究)
	少量参数，通过寄存器传递，多的参数，通过栈传递。  
	
	放置参数的寄存器从 r0 开始
	压栈地址从当前 SP 指针开始
	
	如果参数是复合类型，且size比较大或者不能确定，将会被拷贝到内存中，传递的参数就是内存的地址。
	如果参数大小小于word，将会调整到一个 word 大小
	如果复合类型的 size 不是4的倍数，将会向上圆整到4的倍数
	
	如果参数要求 8 字节对齐，下个操作的寄存器也会随之调整。
	

arm 也有栈帧结构，R11 是帧寄存器，R12 是 IP 寄存器。  








