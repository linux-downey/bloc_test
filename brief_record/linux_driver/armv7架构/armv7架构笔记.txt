精简指令集

*统一的大型寄存器文件
*load/store 架构，数据处理只会基于寄存器，不会作用于内存
*简单的寻址模式

ARM 架构包含了以下的定义：
* debug 架构
* 关联的跟踪体系结构

同时支持 32 位的arm指令集和 16 位的 thumb 指令集。

架构的扩展；
*安全扩展
*多核扩展
*更大物理地址扩展
*虚拟化扩展
*通用定时器扩展
*性能检测扩展
*快速中断上下文切换，这属于老版本的扩展



内存模型：
*访问非对齐内存会产生异常
*严格控制应用程序访问某些内存区域
*翻译虚拟地址
*大小端之间翻译数据
*控制访问内存的顺序
*控制cache
*在多核之间同步共享内存


寄存器为 32 bits 类型，支持以下的数据类型：
* 32bits 指针
* 32bits 整型数
* 16 或 8 bits整数，以零扩展形式存储，零扩展表示没有使用到的部分用0填充
* 两个16 bits的数据
* 4个 8bits 的数据
* 一个 64 位的数据占据两个寄存器，但是直接的 64 bits 数据操作不支持，一个 64 bits 操作需要两条或者多条指令


ARM内核寄存器：

SP:栈顶指针
LR:链接寄存器，保存返回值
PC:程序计数器，总是保存下一条需要执行指令的地址，执行ARM指令时，PC读取为当前指令的地址加8


The Application Program Status Register (APSR):应用编程状态寄存器
只有 PL1 或者更高等级才能访问，
该寄存器包含：
指令执行结果的负标志位
指令执行结果的零标志位
进位标志位
溢出标志位
溢出或饱和标志位















