GIC 支持：

	安全扩展
	虚拟化扩展
	enable、disable或者 生成硬件中断
	生成软件中断
	中断掩码屏蔽位和优先级
	uniprocessor 和 multiprocessor 环境的支持
	在系统睡眠时支持唤醒事件
	
GIC 包括中断组功能：

	每个中断可以配置为 group0 或者 group1
	发送group0的中断到 IRQ 或者 FIQ
	发送group1的中断到 IRQ
	管理group0、1的中断
	可以配置锁定group0的中断
	

GICv2在GICv1上的改进：

	虚拟化扩展
	Group0可以发送到FIQ
	支持唤醒事件 
	支持当系统 power down 或者 switch 的时候保存 GIC 状态
	支持新的两个特性：优先级下降 和中断停用。
	

interrupt state：

	Inactive       处于非激活状态，或者没有pending
	
	Pending        待执行状态，对于硬件中断来说，中断线已经被触发，而对于软件来说，中断被生成，但是等待 CPU 处理。
	
	Active         CPU 已经接收了中断并回复了 ack，表示中断正在执行但是没有完成。 
	
	Active and pending   CPU 正在处理该中断，此时又来了一个相同的中断。  
	

中断的类型：
	
	peripheral interrupt ：外设中断，可以设置成电平触发也可以设置成边沿触发
	
		private peripheral interrupt ：私有外设中断 PPI，中断只会发送到指定的单一 CPU 上。  
	
		shared peripheral interrupt:共享外设中断，外设中断可以发送到任意的 CPU
	
	Software-generated interrupt：SGI,软件中断，软件上往 GIC 的 GICD_SGIR 寄存器写数据就可以产生软件中断。
									产生中断之后由 GICC_IAR 或者 GICC_AIAR寄存器来确定将要发送到哪个 CPU 上。  
	virtual interrupt： 虚拟中断
	
	Maintenance interrupt：同样是虚拟中断相关
									
	
中断处理模型：

	1-N：处理针对多个处理器的中断时，该中断只会被一个处理器处理一次
	N-N：每个处理器独立地接收中断并独立地处理，典型的就是 SGI。
	

Spurious interrupts：虚假中断，GIC 发送中断给 CPU，但是 CPU可能不再需要了。 


banking：
	
	interrupt banking：在多核中，对于 PPI 和 SGI，一个同样的中断 ID 可以对应多个中断，这种被称为 banked intrerupt
	
	register banking：同一个地址映射多个register 副本，
	
	整个 banking 像是一种复用机制，没搞清楚。
	


第二章：GIC partitioning：GIC 分区

	distributor：负责中断优先级的分配，并且发送给对应的 CPU。由 GICD_ 寄存器来管理
	
	CPU interface：CPU 接口，每个 CPU 接口块处理优先级的 masking 和 抢占处理。 
	
	virtual CPU interface：虚拟 CPU 接口，暂时不关注。
	
	需要注意的是，distributor 管理所有的中断输入源，而 CPU interface 针对 processor 存在，也就是每一个 CPU 都会有一个 CPU interface，一个 CPU interface 会连接到一个对应的 CPU。
	
一个 GIC 可以对应 8 个 CPU
	
distributor:

	提供的编程接口：
		将中断发送到 CPU 接口
		enable 或者 disable 各个中断
		设置各个中断的优先级，优先级和中断号是独立的
		设置每个中断的目标 processor
		设置每个中断的触发方式
		设置每个中断被分组为 group0 或者 group1
		发送 SGI 到一个或者多个目标 processor
	额外地：
		每个中断的状态都是可见的
		用户可以设置和清除 pending state

	interrupt IDS：
		32~1019 作为 SPI 中断
		0~31 作为 banked 中断，对应每个 CPU， 0~15 对应 SGI，16~31 对应 PPI。
		2010~1023保留为特殊用途
		
		0~7 作为 Non-secure interrupts
		8~15 作为 secure interrupts
		
	
CPU interface：
	
	提供的编程接口：
		使能发送中断到 CPU 
		ack一个中断
		指示中断处理完成
		为每个 processor 设置中断优先级
		定义处理器的抢占策略
		为 processor 决定最高的待执行中断

当 processor 回复 CPU interface 的时候， distributor 就会将该中断从 pending 状态设置为active 或者 active and pending，在这个时候，CPU interface 又可以重新发送一个中断给 CPU，以抢占 CPU 上正在执行的工作。  

当 processor 处理完一个中断的时候，会通知 CPU interface 任务执行完成，这时候会完成两个动作：

优先级下降，表明处理完成的中断不再能阻止低优先级的任务进入 processor
将中断状态中的 active 移除



第三章：中断处理和优先级

int handling 描述了：
	GIC 是如何阻止 interrupts
	软件上是怎么配置这些 interrupts 的
	GIC 中每个中断在 CPU interface 上的状态机
	GIC 的异常模型
	
优先级处理描述了：
	中断优先级的配置
	pending 中断的执行优先级
	决定中断什么时候对 processor 是可见的，包括中断优先级mask、优先级组、已激活中断的抢占
	
中断分组：
	默认情况下，所有中断都会被分到 group0
	每个中断都可以配置分组为 group0 或者 group1
	CPU interface 可以配置为 group0 然后发送到 FIQ 上
	
SGI 的处理使用 N-N 模型
SPI 的处理使用 1-N 模型

当 GIC 识别到一个中断请求，该中断被置位，如果这时再来一个同样的中断，将不会被重复记录，也就是在处理之前，重复的中断会被忽略。  


GIC 处理中断的序列为：

	GIC 决定哪些中断被使能
	对于每个pending 的中断，distributor 会决定由哪个或者哪些 processor 来执行
	对于每个 CPU interface，distributor 将最高优先级的中断发送出去。
	每个 CPU interface 将决定是否发送一个中断给 processor，如果中断需要，就发送，这会涉及到 distributor 发送过来的中断是否有足够的优先级
	processor 回复中断，GIC 返回 int ID 并更新中断状态。
	中断执行完成之后，processor就会返回  EOI 信号给 GIC
	page 37.
	


GIC 的优先级管理
	
	优先级管理由 GICD_IPRIORITYRn 寄存器设置。
	contributor 总会选择优先级更高的中断发送给 CPU interface
	GIC 支持抢占，distributor 会发送更高优先级中断到 CPU interface，CPU interface 也会发送更高优先级中断给 processor。
	
	group 0 分配高优先级、group 1 分配低优先级
	
	

第四章：编程模型

	列出了 distributor 和 CPU interface 的寄存器 map
	
	register banking：为每个CPU提供多个寄存器的副本，但是基于同一个地址，根据寄存器的属性来决定要使用哪个副本
	
	distributor 和 CPU interface 的寄存器详细描述




	
中断均衡负载

	
