

typedef struct {
	u32 lock;
} arch_rwlock_t;


#define write_lock(lock)	_raw_write_lock(lock)
#define read_lock(lock)		_raw_read_lock(lock)
#define read_unlock(lock)		_raw_read_unlock(lock)
#define write_unlock(lock)		_raw_write_unlock(lock)


/********************************************************************/

void __lockfunc _raw_read_lock(rwlock_t *lock)
{
	__raw_read_lock(lock);
}

static inline void __raw_read_lock(rwlock_t *lock)
{
	preempt_disable();
	rwlock_acquire_read(&lock->dep_map, 0, 0, _RET_IP_);
	LOCK_CONTENDED(lock, do_raw_read_trylock, do_raw_read_lock);
}

#define LOCK_CONTENDED(_lock, try, lock) \
	lock(_lock)

do_raw_read_lock(lock)

void do_raw_read_lock(rwlock_t *lock)
{
	arch_read_lock(&lock->raw_lock);
}

// read lock 的作用就是将 rw->lock 加 1，没有其它操作
static inline void arch_read_lock(arch_rwlock_t *rw)
{
	unsigned long tmp, tmp2;

	prefetchw(&rw->lock);
	__asm__ __volatile__(
"1:	ldrex	%0, [%2]\n"                  // tmp = rw->lock
"	adds	%0, %0, #1\n"                // tmp = tmp + 1
"	strexpl	%1, %0, [%2]\n"              // rw->lock = tmp,执行结果放在 tmp2 中，pl 表示大于等于 0
	WFE("mi")                            // 如果 tmp2 小于 0，mi 表示 N flag 等于 1
"	rsbpls	%0, %1, #0\n"                // ls 表示小于等于 0，
"	bmi	1b"
	: "=&r" (tmp), "=&r" (tmp2)
	: "r" (&rw->lock)
	: "cc");

	smp_mb();                            
}


/******************************************************************/

void __lockfunc _raw_read_unlock(rwlock_t *lock)
{
	__raw_read_unlock(lock);
}


static inline void __raw_read_unlock(rwlock_t *lock)
{
	rwlock_release(&lock->dep_map, 1, _RET_IP_);
	do_raw_read_unlock(lock);
	preempt_enable();
}


void do_raw_read_unlock(rwlock_t *lock)
{
	RWLOCK_BUG_ON(lock->magic != RWLOCK_MAGIC, lock, "bad magic");
	arch_read_unlock(&lock->raw_lock);
}

// read_unlock 就是将 rw->lock 减一
static inline void arch_read_unlock(arch_rwlock_t *rw)
{
	unsigned long tmp, tmp2;

	smp_mb();

	prefetchw(&rw->lock);
	__asm__ __volatile__(
"1:	ldrex	%0, [%2]\n"
"	sub	%0, %0, #1\n"
"	strex	%1, %0, [%2]\n"
"	teq	%1, #0\n"
"	bne	1b"
	: "=&r" (tmp), "=&r" (tmp2)
	: "r" (&rw->lock)
	: "cc");

	if (tmp == 0)
		dsb_sev();
}


/*************************************/

void __lockfunc _raw_write_lock(rwlock_t *lock)
{
	__raw_write_lock(lock);
}

static inline void __raw_write_lock(rwlock_t *lock)
{
	preempt_disable();
	rwlock_acquire(&lock->dep_map, 0, 0, _RET_IP_);
	LOCK_CONTENDED(lock, do_raw_write_trylock, do_raw_write_lock);
}

static inline void arch_write_lock(arch_rwlock_t *rw)
{
	unsigned long tmp;

	prefetchw(&rw->lock);
	__asm__ __volatile__(
"1:	ldrex	%0, [%1]\n"
"	teq	%0, #0\n"
	WFE("ne")
"	strexeq	%0, %2, [%1]\n"      // rw->lock = 0x80000000
"	teq	%0, #0\n"
"	bne	1b"
	: "=&r" (tmp)
	: "r" (&rw->lock), "r" (0x80000000)
	: "cc");

	smp_mb();
}



void __lockfunc _raw_write_unlock(rwlock_t *lock)
{
	__raw_write_unlock(lock);
}

static inline void __raw_write_unlock(rwlock_t *lock)
{
	rwlock_release(&lock->dep_map, 1, _RET_IP_);
	do_raw_write_unlock(lock);
	preempt_enable();
}

static inline void arch_write_unlock(arch_rwlock_t *rw)
{
	smp_mb();

	__asm__ __volatile__(
	"str	%1, [%0]\n"
	:
	: "r" (&rw->lock), "r" (0)
	: "cc");

	dsb_sev();
}



读并发
写者等待所有读者退出才会进入
读者遭遇正在写时，需要等写者执行完成
写者之间互斥

可能造成写者饿死

行人过马路的例子


具体实现：
1、使用一个变量记录锁状态，对于读写对应不同的接口
2、读的时候检测变量最高位是否为1，否则将锁状态 +1，读解锁就减一
3、只有变量为 0 的时候，才能执行写，写操作将变量的最高位置 1
4、写解锁就是将变量的最高位清零

涉及到 wfe 的睡眠，需要讲一下。   
为什么要禁止抢占，解释以下。 
额外的接口：_irq,_bh
