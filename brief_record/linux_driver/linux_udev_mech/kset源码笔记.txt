
struct kset {
	struct list_head list;
	spinlock_t list_lock;
	struct kobject kobj;
	const struct kset_uevent_ops *uevent_ops;
} __randomize_layout;

struct kset_uevent_ops {
	int (* const filter)(struct kset *kset, struct kobject *kobj);
	const char *(* const name)(struct kset *kset, struct kobject *kobj);
	int (* const uevent)(struct kset *kset, struct kobject *kobj,
		      struct kobj_uevent_env *env);
};



// drivers/base/core.c 中的示例：

static const struct kset_uevent_ops device_uevent_ops = {
	.filter =	dev_uevent_filter,   // 用户自定义的过滤函数
	.name =		dev_uevent_name,     // 返回 name                  
	.uevent =	dev_uevent,          // 用户自定义的 uevent，通常是添加 env 参数，netlink 时使用。 
};

// 
int __init devices_init(void){
	devices_kset = kset_create_and_add("devices", &device_uevent_ops, NULL);
}


// 如果 bus 不为 NULL，就返回 bus->name,否则返回 class->name,如果 class 为 NULL，返回 NULL
static const char *dev_uevent_name(struct kset *kset, struct kobject *kobj)
{
	struct device *dev = kobj_to_dev(kobj);

	if (dev->bus)
		return dev->bus->name;
	if (dev->class)
		return dev->class->name;
	return NULL;
}



void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
int kobject_add(struct kobject *kobj, struct kobject *parent,const char *fmt, ...);
int kobject_init_and_add(struct kobject *kobj,struct kobj_type *ktype, struct kobject *parent,const char *fmt, ...);
struct kobject * __must_check kobject_create(void);
struct kobject * __must_check kobject_create_and_add(const char *name,struct kobject *parent);

struct kobject *kobject_get(struct kobject *kobj);
struct kobject * __must_check kobject_get_unless_zero(struct kobject *kobj);


void kobject_del(struct kobject *kobj);
void kobject_put(struct kobject *kobj);

char *kobject_get_path(struct kobject *kobj, gfp_t flag);


void kset_init(struct kset *kset);
int kset_register(struct kset *kset);
struct kset * kset_create_and_add(const char *name,const struct kset_uevent_ops *u,struct kobject *parent_kobj);

struct kset *to_kset(struct kobject *kobj)
void kset_put(struct kset *k)

struct kobject *kset_find_obj(struct kset *, const char *);

/* The global /sys/kernel/ kobject for people to chain off of */
extern struct kobject *kernel_kobj;
/* The global /sys/kernel/mm/ kobject for people to chain off of */
extern struct kobject *mm_kobj;
/* The global /sys/hypervisor/ kobject for people to chain off of */
extern struct kobject *hypervisor_kobj;
/* The global /sys/power/ kobject for people to chain off of */
extern struct kobject *power_kobj;
/* The global /sys/firmware/ kobject for people to chain off of */
extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,char *envp[]);
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);


/************************************************************************************************/
sys_ops 和 attribute 有什么关系。 
struct attribute 原本只是 name 和 umode 的组合，只代表属性。

struct kobj_type {
	void (*release)(struct kobject *kobj);
	const struct sysfs_ops *sysfs_ops;
	struct attribute **default_attrs;
	const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
	const void *(*namespace)(struct kobject *kobj);
};

struct attribute {
	const char		*name;
	umode_t			mode;
#ifdef CONFIG_DEBUG_LOCK_ALLOC
	bool			ignore_lockdep:1;
	struct lock_class_key	*key;
	struct lock_class_key	skey;
#endif
};


struct attribute_group {
	const char		*name;
	umode_t			(*is_visible)(struct kobject *,
					      struct attribute *, int);
	umode_t			(*is_bin_visible)(struct kobject *,
						  struct bin_attribute *, int);
	struct attribute	**attrs;
	struct bin_attribute	**bin_attrs;
};


struct bin_attribute {
	struct attribute	attr;
	size_t			size;
	void			*private;
	ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
			char *, loff_t, size_t);
	ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
			 char *, loff_t, size_t);
	int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
		    struct vm_area_struct *vma);
};



kobj 的初始化：
struct kobject * kobject_create(void)；
void kobject_init(struct kobject *kobj, struct kobj_type *ktype);

create 和 init 的区别在于一个是向内核动态申请，一个是静态地初始化，最终都调用了 kobject_init。  
直接调用  kobject_init 需要自己传入 ktype，而使用 kobject_create 使用默认的 ktype。 

默认的 ktype 为:

static struct kobj_type dynamic_kobj_ktype = {
	.release	= dynamic_kobj_release,
	.sysfs_ops	= &kobj_sysfs_ops,              // 最后实际上还是调用 sysfs_ops，只是默认情况下作了一层封装。
};

struct kobj_attribute {
	struct attribute attr;
	ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
			char *buf);
	ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
			 const char *buf, size_t count);
};

const struct sysfs_ops kobj_sysfs_ops = {
	//struct kobj_attribute * kattr = container_of(attr, struct kobj_attribute, attr);
	//kattr->show(kobj, kattr, buf);
	//所以使用 create 的时候，需要提供 struct kobj_attribute 中包含的 attr，调用的也是 struct kobj_attribute 中的 read 和 store。
	.show	= kobj_attr_show,    
	.store	= kobj_attr_store,
};

struct kobj_attribute 的初始化宏：include/linux/sysfs.h:
比如：
static struct kobj_attribute status_attr = __ATTR_RO(led);  // 只读的
static struct kobj_attribute led_attr = __ATTR(led_status,0660,led_status_show,led_status_store);  // 指定所有的属性

/************************************************************************/
kset 相关操作：


kset_create_and_add    // 需要传入一个 uevent_ops 和可选的 parent， uevent_ops 主要在 netlink 上传的时候被调用。 
	kset_create  //向系统申请一个 kset 并初始化
	kset_register  //注册
		kobject_add_internal  // 添加到内核
		kobject_uevent        // 通过 netlink 发送 KOBJ_ADD 事件到用户空间。
		

/************************************************************************/
group 相关操作：
使用 __ATTR_RO 和 __ATTR 这一类宏定义一个 kobj_attribute 结构，将 kobj_attribute 中的 attribute 赋值给 groups 中的 attribute。  

也可以初始化 groups 中的 bin_attribute 初始化二进制的文件接口，初始化 read、write、mmap 等接口。 


也可以使用 struct device_attribute 来定义 attribute，
对应的宏有  DEVICE_ATTR、DEVICE_ATTR_RW、DEVICE_ATTR_RO 等，在 include/linux/device.h 中。  


一方面，create_group 可以创建一个目录，另一方面，直接使用 kobject_init 传入 ktype 可以创建一个单独的文件。  

创建单独文件的另外的方法：sysfs_create_file，创建一个单独的文件。 

找到是怎么从用户空间过来的。

